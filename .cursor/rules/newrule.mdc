---
description: 
globs: 
alwaysApply: false
---
# Project Rules Directory Structure

Create a `.cursor/rules` directory in your project with the following files:

## 1. `python_coding_standards.md`

```markdown
# Python Coding Standards

## Description
Apply these standards to all Python files in the project.

## Patterns
- "**/*.py"

## Rules
- Follow PEP 8 style guidelines
- Use descriptive variable and function names (snake_case)
- Use PascalCase for class names and UPPER_CASE for constants
- Keep functions focused on a single responsibility
- Limit function length to improve readability (under 50 lines)
- Every function must include a comprehensive docstring using triple quotes

Example function with proper documentation:
```python
def process_transcript(transcript_text, speaker_mapping=None):
    """
    Process a raw transcript and extract structured information.
    
    This function takes raw transcript text and converts it into a structured
    format with proper speaker identification and timestamp preservation.
    
    Args:
        transcript_text (str): Raw transcript text to process
        speaker_mapping (dict, optional): Mapping of speaker IDs to names
        
    Returns:
        dict: Structured transcript with speakers and timestamps
        
    Raises:
        ValueError: If transcript_text is empty or invalid format
    """
    # Function implementation
```
```

## 2. `documentation_requirements.md`

```markdown
# Documentation Requirements

## Description
Guidelines for maintaining project documentation and code documentation.

## Patterns
- "**/*.md"
- "track_and_trace/**"

## Rules
- Update markdown files in track_and_trace directory when significant code changes occur
- Before creating new documentation, review existing files for context
- Document all module interfaces, purpose, and usage
- Include dependency information in markdown documentation
- Keep documentation synchronized with code changes
- Use section headers to organize documentation
- Include progress tracking and next steps

@file python_coding_standards.md
```

## 3. `testing_guidelines.md`

```markdown
# Testing Guidelines

## Description
Standards for testing code modules and functions.

## Patterns
- "**/test_*.py"
- "**/*_test.py"

## Rules
- Test each module (100-300 lines of code) before integration
- Include test cases for expected behavior and edge cases
- Consider using pytest for structured testing
- Test input validation and error handling
- Iteratively fix errors identified during testing
- Use descriptive test names that explain the test purpose
- Include test setup and teardown when appropriate
- Mock external dependencies for unit tests

Example test function:
```python
def test_process_transcript_with_valid_data():
    """Test that process_transcript correctly handles valid transcript data."""
    # Test implementation
```
```

## 4. `transcript_processing.md`

```markdown
# Transcript Processing Guidelines

## Description
Specific guidelines for working with transcript data.

## Patterns
- "**/transcript*.py"
- "**/parser*.py"

## Rules
- Handle different transcript formats consistently
- Preserve speaker identification when processing
- Implement robust text parsing techniques
- Consider using NLP libraries for advanced analysis
- Process transcripts in memory-efficient ways
- Extract key information from conversations
- Maintain conversation context and flow
- Handle timestamps and speaker changes accurately

@file python_coding_standards.md
```